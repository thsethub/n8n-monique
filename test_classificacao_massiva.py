"""
TESTE MASSIVO DE CLASSIFICA√á√ÉO
===============================
Valida centenas de frases em todos os tempos verbais
Garante que NUNCA classificaremos errado
"""

import sys
from pathlib import Path
from collections import defaultdict

root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

from app.services.analisador.classificador import Classificador
from app.services.analisador.normalizador import normalizar_texto
from app.utils.lematizador import (
    lematizar_texto,
    extrair_verbos_de_acao,
    obter_estatisticas,
    VERBOS_INFINITIVOS
)

# ============================================================================
# CASOS DE TESTE MASSIVOS
# ============================================================================

# SYSTEM: Comandos diretos de integra√ß√£o
CASOS_SYSTEM = [
    # === ENVIAR (todos os tempos verbais) ===
    "envie um email para jo√£o",
    "envia o relat√≥rio agora",
    "enviando a planilha para maria",
    "enviado o documento ontem",
    "enviada a apresenta√ß√£o",
    "enviei o email ontem",
    "enviou a fatura",
    "enviaram os arquivos",
    "enviarei o backup amanh√£",
    "enviaremos os dados",
    # "enviaria se pudesse",  # MOVIDO PARA MESSAGES - condicional hipot√©tica
    "enviariam os documentos",
    
    # === CRIAR ===
    "crie uma planilha nova",
    "cria um documento",
    "criando apresenta√ß√£o",
    "criado o rascunho",
    "criada a agenda",
    "criei a planilha",
    "criou o documento",
    "criaram os slides",
    "criarei um backup",
    "criaremos a fatura",
    
    # === AGENDAR/MARCAR ===
    "agende uma reuni√£o amanh√£",
    "agenda o compromisso",
    "agendando a call",
    "agendado o evento",
    "agendei a reuni√£o",
    "agendou o meeting",
    "marque uma reuni√£o",
    "marca o compromisso",
    "marcando a call",
    "marquei a reuni√£o √†s 14h",
    "marcou o evento",
    "marcaram a aula",
    
    # === CANCELAR ===
    "cancele o agendamento",
    "cancela a reuni√£o",
    "cancelando o evento",
    "cancelado o compromisso",
    "cancelei a reuni√£o",
    "cancelou a call",
    "cancelaram o meeting",
    "gostaria de cancelar o agendamento",
    "preciso cancelar a reuni√£o de amanh√£",
    "quero cancelar o compromisso",
    
    # === REAGENDAR ===
    "reagende a reuni√£o",
    "reagenda o compromisso",
    "reagendando a call",
    "reagendei o meeting",
    "reagendou o evento",
    "gostaria de reagendar o agendamento",
    "preciso reagendar a reuni√£o",
    
    # === EXCLUIR/DELETAR/REMOVER ===
    "exclua o documento",
    "exclui o arquivo",
    "excluindo a planilha",
    "exclu√≠do o backup",
    "exclu√≠ o rascunho",
    "excluiu o email",
    "delete o arquivo",
    "deleta o documento",
    "deletando a planilha",
    "deletei o rascunho",
    "deletou o backup",
    "remova o email",
    "remove o arquivo",
    "removendo a planilha",
    "removi o documento",
    "removeu o backup",
    
    # === COMPARTILHAR ===
    "compartilhe o documento com a equipe",
    "compartilha a planilha",
    "compartilhando o arquivo com maria",
    "compartilhei o drive",
    "compartilhou os slides",
    
    # === EDITAR/MODIFICAR ===
    "edite o documento",
    "edita a planilha",
    "editando o arquivo",
    "editei o rascunho",
    "editou o email",
    "modifique a fatura",
    "modifica o boleto",
    "modificando a planilha",
    
    # === BAIXAR/FAZER DOWNLOAD ===
    "baixe o relat√≥rio",
    "baixa o arquivo",
    "baixando a planilha",
    "baixei o documento",
    "baixou o backup",
    "fa√ßa download do arquivo",
    "fazer download da planilha",
    
    # === FAZER UPLOAD/SUBIR ===
    "suba o arquivo",
    "sobe o documento",
    "subindo a planilha",
    "subi o backup",
    "subiu o relat√≥rio",
    "fa√ßa upload do arquivo",
    "fazer upload da planilha",
    
    # === BUSCAR/PROCURAR ===
    "busque o email de jo√£o",
    "busca a planilha antiga",
    "buscando o documento",
    "busquei o arquivo",
    "buscou o backup",
    "procure o email",
    "procura o documento",
    
    # === SALVAR ===
    "salve o documento",
    "salva a planilha",
    "salvando o arquivo",
    "salvei o rascunho",
    "salvou o backup",
    
    # === IMPRIMIR ===
    "imprima o boleto",
    "imprime a fatura",
    "imprimindo o documento",
    "imprimi a planilha",
    "imprimiu o relat√≥rio",
    
    # === EXPORTAR/IMPORTAR ===
    "exporte a planilha",
    "exporta o relat√≥rio",
    "exportando os dados",
    "exportei o arquivo",
    "importe a planilha",
    "importa os dados",
    
    # === COPIAR/MOVER ===
    "copie o arquivo",
    "copia o documento",
    "copiando a planilha",
    "copiei o backup",
    "mova o arquivo",
    "move o documento",
    "movendo a planilha",
    
    # === PAGAR/TRANSFERIR ===
    "pague o boleto",
    "paga a fatura",
    "paguei a cobran√ßa",
    "pagou o pix",
    "transfira o valor",
    "transfere o pagamento",
    "transferi o dinheiro",
    
    # === GERAR/EMITIR ===
    "gere um boleto",
    "gera a fatura",
    "gerando a cobran√ßa",
    "gerei o relat√≥rio",
    "emita a nota fiscal",
    "emite o boleto",
    
    # === CASOS COMPOSTOS ===
    "envie um email com a planilha anexada",
    "crie uma reuni√£o e compartilhe com a equipe",
    "agende uma call e envie o convite",
    "exclua o documento antigo e crie um novo",
    "baixe o arquivo e compartilhe com jo√£o",
]

# MESSAGES: Perguntas diretas/objetivas
CASOS_MESSAGES = [
    # Perguntas curtas e factuais
    "o que √© python?",
    "qual a capital da fran√ßa?",
    "quem foi einstein?",
    "como funciona o git?",
    "quando foi a segunda guerra?",
    "onde fica s√£o paulo?",
    "por que o c√©u √© azul?",
    
    # Perguntas sobre funcionalidades
    "o que voc√™ pode fazer?",
    "quais suas funcionalidades?",
    "voc√™ consegue enviar email?",
    "como posso usar voc√™?",
    "me ajude com algo",
    
    # Perguntas sobre uso (n√£o comandos)
    "como fa√ßo para cancelar?",
    "como usar a agenda?",
    "tutorial de email",
    "dicas de organiza√ß√£o",
    
    # Frases condicionais/hipot√©ticas (sem comando direto)
    "enviaria se pudesse",
]

# USER: Mensagens complexas/pessoais/narrativas/conversacionais
CASOS_USER = [
    # Sauda√ß√µes e intera√ß√µes conversacionais
    "oi",
    "ol√°",
    "tudo bem?",
    "bom dia",
    "boa tarde",
    
    # Confirma√ß√µes curtas
    "sim",
    "n√£o",
    "ok",
    "entendi",
    "obrigado",
    
    # Narrativas (n√£o comandos)
    "voc√™ viu que hackers baixaram dados da amazon?",
    "ele deletou o arquivo ontem sem querer",
    "maria enviou o email na sexta passada",
    "a equipe criou uma planilha incr√≠vel",
    "jo√£o compartilhou o documento comigo",
    "eles agendaram uma reuni√£o surpresa",
    "algu√©m cancelou meu compromisso",
    
    # Contextos pessoais/complexos
    "estou me sentindo sobrecarregado com trabalho",
    "preciso de conselhos sobre minha carreira",
    "gostaria de aprender programa√ß√£o",
    "estou com dificuldade em organizar meu tempo",
    "quero desenvolver minhas habilidades",
    "preciso repensar minha estrat√©gia profissional",
    "gostaria de melhorar minha comunica√ß√£o no trabalho",
    
    # Contextos abstratos (n√£o integra√ß√£o)
    "melhorar meu email profissional",
    "organizar meus documentos mentalmente",
    "criar uma estrat√©gia de estudo",
    "planejar minha carreira",
    
    # Perguntas complexas
    "como posso melhorar minha produtividade e organiza√ß√£o pessoal ao mesmo tempo que desenvolvo novas habilidades?",
    "me explique detalhadamente como funciona o processo de aprendizado de m√°quina",
    "quais s√£o as melhores pr√°ticas para gest√£o de projetos em equipes remotas?",
]

# CASOS AMB√çGUOS (precisam de contexto para classificar corretamente)
CASOS_ESPECIAIS = {
    # Devem ser MESSAGES (perguntas, n√£o comandos)
    "messages": [
        "voc√™ pode enviar email?",  # pergunta sobre capacidade
        "√© poss√≠vel agendar reuni√£o?",  # pergunta sobre funcionalidade
        "como fa√ßo para criar planilha?",  # pergunta sobre como usar
        "onde est√° meu documento?",  # pergunta de localiza√ß√£o
    ],
    
    # Devem ser SYSTEM (comandos impl√≠citos)
    "system": [
        "preciso enviar um email urgente para jo√£o",  # necessidade = comando
        "quero criar uma planilha nova",  # desejo = comando
        "vou agendar uma reuni√£o amanh√£",  # futuro pr√≥ximo = comando
    ],
}


# ============================================================================
# FUN√á√ïES DE TESTE
# ============================================================================

def test_categoria(casos: list, categoria_esperada: str, nome_categoria: str):
    """Testa uma categoria espec√≠fica"""
    print(f"\n{'='*70}")
    print(f"üß™ TESTANDO: {nome_categoria.upper()} ({len(casos)} casos)")
    print(f"{'='*70}\n")
    
    acertos = 0
    erros = []
    
    for i, caso in enumerate(casos, 1):
        texto_norm = normalizar_texto(caso)
        categoria, motivos = Classificador.determinar_categoria(caso, texto_norm)
        
        correto = categoria == categoria_esperada
        status = "‚úÖ" if correto else "‚ùå"
        
        if correto:
            acertos += 1
        else:
            erros.append({
                'caso': caso,
                'esperado': categoria_esperada,
                'obtido': categoria,
                'motivos': motivos
            })
        
        # Mostra apenas erros e amostra de acertos
        if not correto or i <= 5 or i % 20 == 0:
            print(f"{status} [{i:3d}] {caso[:60]:60s} ‚Üí {categoria.upper()}")
            if not correto:
                print(f"      Esperado: {categoria_esperada.upper()}, Motivos: {motivos}")
    
    # Resumo
    taxa_acerto = (acertos / len(casos)) * 100
    print(f"\nüìä Resumo: {acertos}/{len(casos)} acertos ({taxa_acerto:.1f}%)")
    
    if erros:
        print(f"\n‚ùå {len(erros)} ERROS DETECTADOS:")
        for erro in erros[:10]:  # Mostra at√© 10 erros
            print(f"\n   Caso: '{erro['caso']}'")
            print(f"   Esperado: {erro['esperado'].upper()}")
            print(f"   Obtido: {erro['obtido'].upper()}")
            print(f"   Motivos: {erro['motivos']}")
    
    return acertos, len(casos), erros


def test_casos_especiais():
    """Testa casos amb√≠guos que precisam de contexto"""
    print(f"\n{'='*70}")
    print(f"üéØ TESTANDO: CASOS ESPECIAIS (Amb√≠guos)")
    print(f"{'='*70}\n")
    
    total_acertos = 0
    total_casos = 0
    
    for categoria_esperada, casos in CASOS_ESPECIAIS.items():
        print(f"\n  ‚Üí Deve ser {categoria_esperada.upper()}:")
        for caso in casos:
            texto_norm = normalizar_texto(caso)
            categoria, motivos = Classificador.determinar_categoria(caso, texto_norm)
            
            correto = categoria == categoria_esperada
            status = "‚úÖ" if correto else "‚ùå"
            total_casos += 1
            
            if correto:
                total_acertos += 1
            
            print(f"     {status} '{caso}' ‚Üí {categoria.upper()}")
            if not correto:
                print(f"         Esperado: {categoria_esperada.upper()}, Motivos: {motivos}")
    
    taxa = (total_acertos / total_casos) * 100
    print(f"\n  üìä Casos especiais: {total_acertos}/{total_casos} ({taxa:.1f}%)")
    
    return total_acertos, total_casos


def verificar_aprendizado():
    """Verifica o sistema de aprendizado de verbos"""
    print(f"\n{'='*70}")
    print(f"üß† SISTEMA DE APRENDIZADO")
    print(f"{'='*70}\n")
    
    stats = obter_estatisticas()
    
    print(f"üìö Dicion√°rio Est√°tico:")
    print(f"   ‚Ä¢ Conjuga√ß√µes: {stats['dicionario_estatico']['total_conjugacoes']}")
    print(f"   ‚Ä¢ Verbos √∫nicos: {stats['dicionario_estatico']['verbos_unicos_infinitivo']}")
    
    print(f"\nüß† Dicion√°rio Aprendido:")
    print(f"   ‚Ä¢ Palavras aprendidas: {stats['dicionario_aprendido']['total_palavras_aprendidas']}")
    print(f"   ‚Ä¢ Pendentes de salvar: {stats['dicionario_aprendido']['palavras_desde_ultimo_save']}")
    
    print(f"\n‚ö° Cache:")
    print(f"   ‚Ä¢ Taxa de acerto: {stats['cache']['taxa_acerto_pct']:.1f}%")
    print(f"   ‚Ä¢ Tamanho: {stats['cache']['tamanho_atual']}/{stats['cache']['tamanho_maximo']}")
    
    print(f"\nü§ñ spaCy:")
    print(f"   ‚Ä¢ Dispon√≠vel: {'‚úÖ Sim' if stats['spacy']['disponivel'] else '‚ùå N√£o'}")
    print(f"   ‚Ä¢ Carregado: {'‚úÖ Sim' if stats['spacy']['carregado'] else '‚ùå N√£o'}")
    
    print(f"\nüìä TOTAL:")
    print(f"   ‚Ä¢ Palavras conhecidas: {stats['total_palavras_conhecidas']}")
    print(f"   ‚Ä¢ Verbos de integra√ß√£o: {len(VERBOS_INFINITIVOS)}")


def main():
    print("\n" + "="*70)
    print("üöÄ TESTE MASSIVO DE CLASSIFICA√á√ÉO - VALIDA√á√ÉO COMPLETA")
    print("="*70)
    
    # Estat√≠sticas gerais
    resultados = {
        'total_acertos': 0,
        'total_casos': 0,
        'erros_por_categoria': defaultdict(list)
    }
    
    # Testa SYSTEM
    acertos, total, erros = test_categoria(CASOS_SYSTEM, "system", "SYSTEM (Comandos de Integra√ß√£o)")
    resultados['total_acertos'] += acertos
    resultados['total_casos'] += total
    resultados['erros_por_categoria']['system'] = erros
    
    # Testa MESSAGES
    acertos, total, erros = test_categoria(CASOS_MESSAGES, "messages", "MESSAGES (Perguntas Diretas)")
    resultados['total_acertos'] += acertos
    resultados['total_casos'] += total
    resultados['erros_por_categoria']['messages'] = erros
    
    # Testa USER
    acertos, total, erros = test_categoria(CASOS_USER, "user", "USER (Complexas/Pessoais)")
    resultados['total_acertos'] += acertos
    resultados['total_casos'] += total
    resultados['erros_por_categoria']['user'] = erros
    
    # Testa casos especiais
    acertos, total = test_casos_especiais()
    resultados['total_acertos'] += acertos
    resultados['total_casos'] += total
    
    # Verifica aprendizado
    verificar_aprendizado()
    
    # RELAT√ìRIO FINAL
    print(f"\n{'='*70}")
    print("üìä RELAT√ìRIO FINAL")
    print(f"{'='*70}\n")
    
    taxa_geral = (resultados['total_acertos'] / resultados['total_casos']) * 100
    
    print(f"‚úÖ Total de acertos: {resultados['total_acertos']}/{resultados['total_casos']}")
    print(f"üìà Taxa de acerto geral: {taxa_geral:.2f}%")
    
    # An√°lise por categoria
    print(f"\nüìã Erros por categoria:")
    for cat, erros in resultados['erros_por_categoria'].items():
        if erros:
            print(f"   ‚Ä¢ {cat.upper()}: {len(erros)} erros")
    
    # Veredito
    print(f"\n{'='*70}")
    if taxa_geral >= 95:
        print("üéâ EXCELENTE! Sistema com alta confiabilidade (‚â•95%)")
    elif taxa_geral >= 90:
        print("‚úÖ BOM! Sistema funcional (‚â•90%)")
    elif taxa_geral >= 80:
        print("‚ö†Ô∏è  ATEN√á√ÉO! Sistema precisa melhorar (‚â•80%)")
    else:
        print("‚ùå CR√çTICO! Sistema precisa revis√£o urgente (<80%)")
    
    print(f"{'='*70}\n")
    
    return taxa_geral >= 90


if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)
