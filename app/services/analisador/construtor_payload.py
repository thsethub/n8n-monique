"""
M√≥dulo respons√°vel pela constru√ß√£o do payload para a API do OpenAI.
"""

from typing import Any, Dict, List, Tuple
from .detector_scopes import DetectorDeScopes
from .detector_idioma import DetectorDeIdioma


class ConstrutorDePayload:
    """Constr√≥i payloads otimizados para envio √† API do OpenAI."""

    def __init__(self, contexto: Dict[str, Any], payload_original: Dict[str, Any]):
        """
        Inicializa o construtor de payload.

        Args:
            contexto: Contexto da requisi√ß√£o (ctx)
            payload_original: Payload original da requisi√ß√£o
        """
        self.contexto = contexto
        self.payload_original = payload_original

    def construir_payload(
        self, categoria: str, mensagem_original: str, texto_normalizado: str
    ) -> Tuple[Dict[str, Any], List[str]]:
        """
        Constr√≥i o payload otimizado para envio √† API do OpenAI.

        Args:
            categoria: Categoria da mensagem (system/messages/user)
            mensagem_original: Mensagem original do usu√°rio
            texto_normalizado: Texto normalizado

        Returns:
            Tupla com (payload completo, lista de scopes)
        """
        idioma = self.contexto.get("lang") or DetectorDeIdioma.determinar_idioma(
            mensagem_original
        )

        prompts_de_sistema, scope = self._criar_prompts_de_sistema(
            categoria, idioma, texto_normalizado
        )
        historico_da_conversa = self._obter_historico_da_conversa()

        mensagens = (
            prompts_de_sistema
            + historico_da_conversa
            + [{"role": "user", "content": mensagem_original}]
        )

        parametros_dinamicos = self._calcular_parametros_da_ia(categoria)
        modelo_selecionado = self._selecionar_modelo_ia(categoria)

        payload_final = {
            "model": modelo_selecionado,
            "messages": mensagens,
            **parametros_dinamicos,
        }
        return payload_final, scope

    def _criar_prompts_de_sistema(
        self, categoria: str, idioma: str, texto_normalizado: str
    ) -> Tuple[List[Dict[str, str]], List[str]]:
        """
        Cria os prompts de sistema apropriados baseados na categoria e idioma.

        Args:
            categoria: Categoria da mensagem
            idioma: Idioma detectado
            texto_normalizado: Texto normalizado

        Returns:
            Tupla com (lista de prompts, lista de scopes)
        """
        prompts = []
        scope_detectadas = []

        # 1. Prompt de Idioma (sempre adicionado)
        prompt_idioma = (
            "Reply in English."
            if idioma == "en"
            else "Responda em portugu√™s do Brasil."
        )
        prompts.append({"role": "system", "content": prompt_idioma})

        # 2. Prompts Espec√≠ficos da Categoria
        if categoria == "system":
            scope_detectadas = DetectorDeScopes.detectar_scopes(texto_normalizado)
            scope_str = ", ".join(scope_detectadas) or "nenhuma"
            prompts.append(
                {
                    "role": "system",
                    "content": f"""Voc√™ √© um assistente pessoal no WhatsApp. O usu√°rio quer usar integra√ß√µes com ferramentas.

üîß APIs dispon√≠veis: {scope_str}

INSTRU√á√ïES:
1. Confirme que entendeu a solicita√ß√£o
2. Explique o que voc√™ faria de forma amig√°vel
3. Pe√ßa confirma√ß√£o antes de executar
4. Seja claro sobre quais dados voc√™ precisa

Mantenha um tom amig√°vel e profissional, como um assistente pessoal confi√°vel.""",
                }
            )
        else:  # Categoria 'user' ou 'messages'
            prompts.append(
                {
                    "role": "system",
                    "content": """Voc√™ √© um assistente pessoal no WhatsApp. Converse de forma natural, como um amigo prestativo e inteligente.

TOM DE VOZ:
‚úÖ Amig√°vel e caloroso
‚úÖ Claro e direto
‚úÖ Emp√°tico e compreensivo
‚ùå N√£o seja rob√≥tico
‚ùå N√£o use jarg√µes t√©cnicos desnecess√°rios
‚ùå N√£o seja excessivamente formal

FORMATA√á√ÉO WHATSAPP (CR√çTICO):
O WhatsApp tem limita√ß√µes de formata√ß√£o. Siga EXATAMENTE estas regras:

‚úÖ Use emojis para destacar (üìö ‚ú® üí° ‚ö° etc)
‚úÖ Use MAI√öSCULAS para √™nfase quando necess√°rio
‚úÖ Quebre linhas para separar ideias
‚ùå N√ÉO use * _ ~ para formata√ß√£o (quebra no WhatsApp)
‚ùå N√ÉO use indenta√ß√£o (espa√ßos/tabs no in√≠cio)

ESTRUTURA DE LISTAS:
Formato CORRETO para listas no WhatsApp:

1. Primeiro ponto
Explica√ß√£o do primeiro ponto aqui.

2. Segundo ponto
Explica√ß√£o do segundo ponto.

OU use este formato simples:

üìå Primeiro ponto - Explica√ß√£o direta
üìå Segundo ponto - Explica√ß√£o direta

NUNCA fa√ßa assim:
1. T√≠tulo:
- Subt√≥pico (quebra!)
- Subt√≥pico (quebra!)

Use emojis ocasionalmente.""",
                }
            )
            if categoria == "user":
                prompts.append(
                    {
                        "role": "system",
                        "content": """CONTEXTO: Mensagem complexa ou longa.

COMO RESPONDER:
1. Mostre que entendeu fazendo 1-2 perguntas (se necess√°rio)
2. Estruture em t√≥picos numerados ou com emojis
3. D√™ exemplos pr√°ticos
4. Seja detalhado mas n√£o verboso
5. Termine oferecendo ajuda

FORMATO CORRETO:
1. T√≠tulo do t√≥pico
Explica√ß√£o aqui na linha seguinte.

2. Pr√≥ximo t√≥pico
Outra explica√ß√£o.

OU:
üìå Ponto importante - Explica√ß√£o direta
üìå Outro ponto - Explica√ß√£o direta

NUNCA use h√≠fen ap√≥s dois pontos ou formata√ß√£o * _ ~""",
                    }
                )
            elif categoria == "messages":
                prompts.append(
                    {
                        "role": "system",
                        "content": """CONTEXTO: Pergunta direta e objetiva.

COMO RESPONDER:
1. Seja direto, mas amig√°vel
2. Responda em 2-4 frases curtas
3. Use uma linguagem simples
4. Se necess√°rio, ofere√ßa um exemplo r√°pido

Exemplo: "√â simples! Voc√™ pode fazer X, Y e Z. Quer que eu explique algum desses com mais detalhes?" """,
                    }
                )

        return prompts, scope_detectadas

    def _selecionar_modelo_ia(self, categoria: str) -> str:
        """
        Seleciona o modelo de IA mais apropriado baseado na categoria da mensagem.

        Usando gpt-4o (mesmo modelo do portal ChatGPT) para m√°xima qualidade.

        Args:
            categoria: Categoria da mensagem

        Returns:
            Nome do modelo a ser usado
        """
        modelo_customizado = self.contexto.get("model")
        if modelo_customizado:
            return modelo_customizado

        # Usar gpt-4o (mesmo do portal ChatGPT) para todas as categorias
        return "gpt-4o"

    def _calcular_parametros_da_ia(self, categoria: str) -> Dict[str, Any]:
        """
        Calcula par√¢metros din√¢micos (temperature, max_tokens) baseados na categoria.

        Valores similares ao portal ChatGPT para conversa√ß√£o natural:
        - MESSAGES: Temperature 1.0 (padr√£o ChatGPT), respostas naturais
        - SYSTEM: Temperature 0.7 (confirma√ß√µes amig√°veis)
        - USER: Temperature 1.0 (explica√ß√µes criativas como ChatGPT)

        Args:
            categoria: Categoria da mensagem

        Returns:
            Dicion√°rio com par√¢metros (temperature, max_tokens)
        """
        temp_base = float(self.contexto.get("temperature", 1.0))

        if categoria == "messages":
            # Perguntas diretas: naturais e conversacionais (padr√£o ChatGPT)
            return {"temperature": min(temp_base, 1.0), "max_tokens": 800}
        elif categoria == "system":
            # Integra√ß√µes: precisas mas amig√°veis
            return {"temperature": min(temp_base, 0.7), "max_tokens": 1200}
        else:  # user
            # Conversas complexas: criativas como ChatGPT
            return {"temperature": min(temp_base, 1.0), "max_tokens": 2000}

    def _obter_historico_da_conversa(self) -> List[Dict[str, str]]:
        """
        Obt√©m o hist√≥rico da conversa, limitado a 2-3 mensagens mais recentes.

        Returns:
            Lista com hist√≥rico formatado
        """
        historico = self.payload_original.get("history", [])
        if not isinstance(historico, list):
            return []

        historico_valido = [
            {"role": msg["role"], "content": msg["content"]}
            for msg in historico
            if isinstance(msg, dict) and "role" in msg and "content" in msg
        ]
        return historico_valido[-3:]
