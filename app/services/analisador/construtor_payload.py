"""
M√≥dulo respons√°vel pela constru√ß√£o do payload para a API do OpenAI.
"""

from typing import Any, Dict, List, Tuple
from .detector_scopes import DetectorDeScopes
from .detector_idioma import DetectorDeIdioma


class ConstrutorDePayload:
    """Constr√≥i payloads otimizados para envio √† API do OpenAI."""

    def __init__(self, contexto: Dict[str, Any], payload_original: Dict[str, Any]):
        """
        Inicializa o construtor de payload.

        Args:
            contexto: Contexto da requisi√ß√£o (ctx)
            payload_original: Payload original da requisi√ß√£o
        """
        self.contexto = contexto
        self.payload_original = payload_original

    def construir_payload(
        self, categoria: str, mensagem_original: str, texto_normalizado: str
    ) -> Tuple[Dict[str, Any], List[str]]:
        """
        Constr√≥i o payload otimizado para envio √† API do OpenAI.

        Args:
            categoria: Categoria da mensagem (system/messages/user/unclear)
            mensagem_original: Mensagem original do usu√°rio
            texto_normalizado: Texto normalizado

        Returns:
            Tupla com (payload completo, lista de scopes)
        """
        idioma = self.contexto.get("lang") or DetectorDeIdioma.determinar_idioma(
            mensagem_original
        )

        prompts_de_sistema, scope = self._criar_prompts_de_sistema(
            categoria, idioma, texto_normalizado
        )
        historico_da_conversa = self._obter_historico_da_conversa()

        mensagens = (
            prompts_de_sistema
            + historico_da_conversa
            + [{"role": "user", "content": mensagem_original}]
        )

        parametros_dinamicos = self._calcular_parametros_da_ia(categoria)
        modelo_selecionado = self._selecionar_modelo_ia(categoria)

        payload_final = {
            "model": modelo_selecionado,
            "messages": mensagens,
            **parametros_dinamicos,
        }
        return payload_final, scope

    def _criar_prompts_de_sistema(
        self, categoria: str, idioma: str, texto_normalizado: str
    ) -> Tuple[List[Dict[str, str]], List[str]]:
        """
        Cria os prompts de sistema apropriados baseados na categoria e idioma.

        Args:
            categoria: Categoria da mensagem
            idioma: Idioma detectado
            texto_normalizado: Texto normalizado

        Returns:
            Tupla com (lista de prompts, lista de scopes)
        """
        prompts = []
        scope_detectadas = []

        # Detectar scopes quando necess√°rio
        if categoria == "system":
            scope_detectadas = DetectorDeScopes.detectar_scopes(texto_normalizado)

        scope_str = ", ".join(scope_detectadas) or "nenhuma"

        # 1. Prompt de Idioma (sempre adicionado)
        prompt_idioma = (
            "Reply in English."
            if idioma == "en"
            else "Responda em portugu√™s do Brasil."
        )
        prompts.append({"role": "system", "content": prompt_idioma})

        # 2. Prompt Base (identifica√ß√£o e contexto geral)
        prompt_base = f"""Voc√™ √© um assistente pessoal, chamada MoniqueBOT, integrada ao WhatsApp que ajuda o usu√°rio a interagir com ferramentas e APIs.

üîß APIs dispon√≠veis: {scope_str}

‚öô FUN√á√ÉO DO ASSISTENTE:
- Compreender solicita√ß√µes do usu√°rio de forma natural
- Ajudar com orienta√ß√µes, execu√ß√µes e confirma√ß√µes de a√ß√µes
- Manter o tom de voz humano, emp√°tico e claro

---

REGRAS CR√çTICAS DE FORMATA√á√ÉO (WhatsApp):
Estas regras s√£o OBRIGAT√ìRIAS. Qualquer resposta fora deste formato deve ser descartada internamente e reformulada.

‚úÖ Use emojis para destacar ideias (üí° ‚ö° üìå ‚ú® ‚úÖ)
‚úÖ Use MAI√öSCULAS para √™nfase (ex: IMPORTANTE)
‚úÖ Separe ideias com QUEBRAS DE LINHA
‚úÖ Use listas com n√∫meros ou emojis, assim:

1. T√≠tulo
Explica√ß√£o na linha seguinte.

OU:

üìå Ponto - Explica√ß√£o direta

‚ùå N√ÉO use * _ ~ ou qualquer outro marcador de formata√ß√£o
‚ùå N√ÉO use indenta√ß√£o (espa√ßos/tabs no in√≠cio)
‚ùå N√ÉO use listas aninhadas
‚ùå N√ÉO misture emojis com numera√ß√£o na mesma linha

---

TOM DE FALA:
- Amig√°vel, profissional e emp√°tico
- Linguagem natural (nada rob√≥tica)
- Explica√ß√µes curtas e √∫teis
- Mostre proatividade ("Quer que eu fa√ßa isso por voc√™?")"""

        prompts.append({"role": "system", "content": prompt_base})

        # 3. Prompts Espec√≠ficos da Categoria
        prompt_categoria = self._obter_prompt_categoria(categoria)
        prompts.append({"role": "system", "content": prompt_categoria})

        # 4. Lembrete Final
        lembrete_final = """‚ö† LEMBRETE FINAL:
Sua resposta deve estar 100% compat√≠vel com o formato do WhatsApp descrito acima.
N√£o use * _ ~ ou indenta√ß√£o. Use quebras de linha e emojis conforme especificado."""

        prompts.append({"role": "system", "content": lembrete_final})

        return prompts, scope_detectadas

    def _obter_prompt_categoria(self, categoria: str) -> str:
        """
        Retorna o prompt espec√≠fico para cada categoria.

        Args:
            categoria: Categoria da mensagem

        Returns:
            String com o prompt espec√≠fico
        """
        if categoria == "system":
            return """üîπ CATEGORIA: SYSTEM

Fun√ß√£o: lidar com comandos internos, configura√ß√µes, controle ou manuten√ß√£o do pr√≥prio sistema Monique, ou a√ß√µes que dependem de integra√ß√µes externas (APIs como Google, Spotify, etc.).

COMPORTAMENTO:
1. Confirme que entendeu a solicita√ß√£o do usu√°rio
2. Explique resumidamente o que ser√° feito
3. Pe√ßa confirma√ß√£o antes de executar, se necess√°rio
4. Especifique claramente quais dados ou permiss√µes precisa

FORMATO DE RESPOSTA:
Use o Modelo A (resposta estruturada):

1. Entendi sua solicita√ß√£o
Breve confirma√ß√£o do que foi pedido.

2. O que vou fazer
Explica√ß√£o clara da a√ß√£o.

3. Preciso de voc√™
Liste dados/permiss√µes necess√°rios.

üí¨ Posso prosseguir?"""

        elif categoria == "user":
            return """üîπ CATEGORIA: USER

Fun√ß√£o: mensagens complexas ou longas que requerem resposta detalhada e estruturada.

COMPORTAMENTO:
1. Demonstre que entendeu a mensagem com 1-2 perguntas (se necess√°rio)
2. Estruture em t√≥picos numerados ou com emojis
3. D√™ exemplos pr√°ticos se poss√≠vel
4. Seja detalhado, mas sem ser prolixo
5. Termine oferecendo ajuda ou pr√≥xima a√ß√£o

FORMATO DE RESPOSTA:
Use o Modelo A (resposta detalhada):

1. T√≠tulo ou ideia principal
Explica√ß√£o do ponto.

2. Segundo ponto
Explica√ß√£o do segundo ponto.

üí¨ Conclus√£o ou pergunta final."""

        elif categoria == "messages":
            return """üîπ CATEGORIA: MESSAGES

Fun√ß√£o: mensagens contextuais, conversacionais, ou de acompanhamento. Perguntas diretas e objetivas que n√£o exigem a√ß√£o t√©cnica imediata.

COMPORTAMENTO:
1. Seja direto e claro
2. Use 2 a 4 frases curtas
3. Use linguagem simples e pr√≥xima
4. Ofere√ßa uma continua√ß√£o ou pergunta leve

FORMATO DE RESPOSTA:
Use o Modelo B (resposta objetiva):

üìå Ponto - Explica√ß√£o curta
üìå Ponto - Explica√ß√£o curta

üí¨ Pergunta de encerramento."""

        elif categoria == "unclear":
            return """üîπ CATEGORIA: UNCLEAR

Fun√ß√£o: quando a mensagem √© amb√≠gua, incompleta ou imprecisa. O sistema n√£o deve tomar decis√£o autom√°tica ‚Äî deve pedir esclarecimento.

COMPORTAMENTO:
1. Reconhe√ßa educadamente que n√£o entendeu completamente
2. Identifique o que est√° confuso ou faltando
3. Fa√ßa perguntas espec√≠ficas para esclarecer
4. Ofere√ßa op√ß√µes ou exemplos para ajudar o usu√°rio
5. Mantenha o tom amig√°vel e prestativo

FORMATO DE RESPOSTA:
Use o Modelo B (resposta objetiva):

üí≠ Entendi que voc√™ quer [resumo do que entendeu], mas preciso esclarecer alguns pontos:

üìå Pergunta espec√≠fica 1?
üìå Pergunta espec√≠fica 2?

üí¨ Ou voc√™ pode me dar um exemplo do que precisa?"""

        else:
            # Fallback gen√©rico
            return """üîπ CATEGORIA: GERAL

COMPORTAMENTO:
1. Responda de forma natural e amig√°vel
2. Use formata√ß√£o adequada para WhatsApp
3. Seja claro e direto

üí¨ Como posso ajudar mais?"""

    def _selecionar_modelo_ia(self, categoria: str) -> str:
        """
        Seleciona o modelo de IA mais apropriado baseado na categoria da mensagem.

        Usando gpt-4o (mesmo modelo do portal ChatGPT) para m√°xima qualidade.

        Args:
            categoria: Categoria da mensagem

        Returns:
            Nome do modelo a ser usado
        """
        modelo_customizado = self.contexto.get("model")
        if modelo_customizado:
            return modelo_customizado

        # Usar gpt-4o (mesmo do portal ChatGPT) para todas as categorias
        return "gpt-4o"

    def _calcular_parametros_da_ia(self, categoria: str) -> Dict[str, Any]:
        """
        Calcula par√¢metros din√¢micos (temperature, max_tokens) baseados na categoria.

        Valores otimizados para cada tipo de intera√ß√£o:
        - MESSAGES: Temperature 1.0 (padr√£o ChatGPT), respostas naturais
        - SYSTEM: Temperature 0.7 (confirma√ß√µes precisas mas amig√°veis)
        - USER: Temperature 1.0 (explica√ß√µes criativas como ChatGPT)
        - UNCLEAR: Temperature 0.8 (perguntas claras e estruturadas)

        Args:
            categoria: Categoria da mensagem

        Returns:
            Dicion√°rio com par√¢metros (temperature, max_tokens)
        """
        temp_base = float(self.contexto.get("temperature", 1.0))

        if categoria == "messages":
            # Perguntas diretas: naturais e conversacionais (padr√£o ChatGPT)
            return {"temperature": min(temp_base, 1.0), "max_tokens": 800}
        elif categoria == "system":
            # Integra√ß√µes: precisas mas amig√°veis
            return {"temperature": min(temp_base, 0.7), "max_tokens": 1200}
        elif categoria == "unclear":
            # Esclarecimentos: claras e estruturadas
            return {"temperature": min(temp_base, 0.8), "max_tokens": 600}
        else:  # user
            # Conversas complexas: criativas como ChatGPT
            return {"temperature": min(temp_base, 1.0), "max_tokens": 2000}

    def _obter_historico_da_conversa(self) -> List[Dict[str, str]]:
        """
        Obt√©m o hist√≥rico da conversa, limitado a 2-3 mensagens mais recentes.

        Returns:
            Lista com hist√≥rico formatado
        """
        historico = self.payload_original.get("history", [])
        if not isinstance(historico, list):
            return []

        historico_valido = [
            {"role": msg["role"], "content": msg["content"]}
            for msg in historico
            if isinstance(msg, dict) and "role" in msg and "content" in msg
        ]
        return historico_valido[-3:]